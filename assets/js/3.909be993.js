(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{391:function(t,a,s){t.exports=s.p+"assets/img/create-new-1.5c12fb45.png"},392:function(t,a,s){t.exports=s.p+"assets/img/create-new-2.c4db33f8.png"},393:function(t,a,s){t.exports=s.p+"assets/img/create-new-3.9ff432ee.png"},394:function(t,a,s){t.exports=s.p+"assets/img/create-new-preview.8b7f2dc8.png"},395:function(t,a,s){t.exports=s.p+"assets/img/create-new-structure.ae80a8c5.png"},396:function(t,a,s){t.exports=s.p+"assets/img/build-target.4659f209.png"},397:function(t,a,s){t.exports=s.p+"assets/img/xib-objects.8a46ee13.png"},398:function(t,a,s){t.exports=s.p+"assets/img/app-delegate.27e000e8.png"},399:function(t,a,s){t.exports=s.p+"assets/img/framework-1.baff2659.png"},400:function(t,a,s){t.exports=s.p+"assets/img/framework-api.e7db28fb.png"},401:function(t,a,s){t.exports=s.p+"assets/img/framework-import.7b55ba8e.png"},402:function(t,a,s){t.exports=s.p+"assets/img/framework-build-phase.e96b79e4.png"},403:function(t,a,s){t.exports=s.p+"assets/img/framework-use-1.5cfda8c3.png"},404:function(t,a,s){t.exports=s.p+"assets/img/framework-use-2.7096a7fa.png"},405:function(t,a,s){t.exports=s.p+"assets/img/plugin-structure.290ce5ff.png"},406:function(t,a,s){t.exports=s.p+"assets/img/manifest.4fbefd8b.png"},407:function(t,a,s){t.exports=s.p+"assets/img/demo-plugin.ae67b031.png"},408:function(t,a,s){t.exports=s.p+"assets/img/arc-only.0bf0d889.png"},409:function(t,a,s){t.exports=s.p+"assets/img/arc.89141106.png"},429:function(t,a,s){"use strict";s.r(a);var e=s(25),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"osx开发入门和oc基础"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#osx开发入门和oc基础"}},[t._v("#")]),t._v(" OSX开发入门和OC基础")]),t._v(" "),e("h2",{attrs:{id:"新建app工程并编译运行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#新建app工程并编译运行"}},[t._v("#")]),t._v(" 新建app工程并编译运行")]),t._v(" "),e("h3",{attrs:{id:"新建osx应用程序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#新建osx应用程序"}},[t._v("#")]),t._v(" 新建OSX应用程序")]),t._v(" "),e("p",[t._v('点击"Create a new Xcode project"创建一个新的项目：\n'),e("img",{attrs:{src:s(391),alt:"create a new Xcode project 1"}}),t._v("\n选择macapp标签下的app，并点击next：\n"),e("img",{attrs:{src:s(392),alt:"create a new Xcode project 2"}}),t._v("\n语言选择Object-C，User Interface 选择XIB，可按需选择是否包含UI Test和Unit Test：\n"),e("img",{attrs:{src:s(393),alt:"create a new Xcode project 3"}}),t._v("\n此时Demo会生成，执行一次构建(快捷键CMD + B)，即可在Products文件夹(在Xcode工程中叫Group)下看到编译好的app，双击即可运行：\n"),e("img",{attrs:{src:s(394),alt:"create a new Xcode project preview"}})]),t._v(" "),e("h3",{attrs:{id:"工程结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#工程结构"}},[t._v("#")]),t._v(" 工程结构")]),t._v(" "),e("p",[t._v("目前所有的代码都是默认创建的代码，源码的主要结构如下："),e("br"),t._v(" "),e("img",{attrs:{src:s(395),alt:"project structure"}}),e("br"),t._v("\n核心文件：")]),t._v(" "),e("ul",[e("li",[t._v("main.m。程序入口文件。")]),t._v(" "),e("li",[t._v("AppDelegate.h。NSApplication委托对象的头文件")]),t._v(" "),e("li",[t._v("AppDelegate.m。NSApplication委托对象的实现")]),t._v(" "),e("li",[t._v("MainMenu.xib。主视图文件")]),t._v(" "),e("li",[t._v("Info.plist。运行时使用的配置文件")])]),t._v(" "),e("h3",{attrs:{id:"主要代码文件之间的关系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#主要代码文件之间的关系"}},[t._v("#")]),t._v(" 主要代码文件之间的关系")]),t._v(" "),e("p",[t._v("点击工程导航目录的根节点，可以在General配置中看到Deployment Info的Main Interface值为MainMenu，即上文提到的MainMenu.xib为我们的应用程序的主用户界面，app启动运行时，会先去加载该视图。\n"),e("img",{attrs:{src:s(396),alt:"build target"}}),e("br"),t._v("\nMainMenu.xib绑定了一个AppDelegate自定义controller，xib视图初始化的时候会实例化一个AppDelegate Controller。\n"),e("img",{attrs:{src:s(397),alt:"xib objects"}}),e("br"),t._v("\n在AppDelegate.m文件中，点击代码行号上的圆点，也可以看到AppDelegate接口的window属性也绑定了MainMenu.xib\n"),e("img",{attrs:{src:s(398),alt:"app-delegate"}})]),t._v(" "),e("h2",{attrs:{id:"新建并使用framework"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#新建并使用framework"}},[t._v("#")]),t._v(" 新建并使用framework")]),t._v(" "),e("h3",{attrs:{id:"新建自定义的framework"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#新建自定义的framework"}},[t._v("#")]),t._v(" 新建自定义的framework")]),t._v(" "),e("p",[t._v("同新建APP类似，以OSX的framework为例，新建framework的时候，选择"),e("a",{attrs:{href:"https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/OSX_Technology_Overview/SystemFrameworks/SystemFrameworks.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Framework"),e("OutboundLink")],1),t._v("分类即可：\n"),e("img",{attrs:{src:s(399),alt:"framework-1"}}),e("br"),t._v("\n我们新建一个简单的MyLog Cocoa类，会生成对应的.h和.m文件，声明并实现log接口："),e("br"),t._v(" "),e("img",{attrs:{src:s(400),alt:"framework-api"}}),t._v("\n然后在新建Framework时自动生成的头文件中，导入我们刚刚创建的接口的头文件："),e("br"),t._v(" "),e("img",{attrs:{src:s(401),alt:"framework-import"}}),t._v("\n在framework的target的Build Phases中，将我们的Mylog.h拖动到Headers中的Public列表下，将接口暴露给外部："),e("br"),t._v(" "),e("img",{attrs:{src:s(402),alt:"framework-build"}}),t._v("\n此时，编译项目（快捷键CMD + B），即可编译我们的framework。文件树的Producsts下就是编译产物。")]),t._v(" "),e("h3",{attrs:{id:"使用自定义的framework"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用自定义的framework"}},[t._v("#")]),t._v(" 使用自定义的framework")]),t._v(" "),e("p",[t._v("使用时，以在上面新建的Demo App使用framework为例，将编译好的framework拖到Demo App中。\n在项目配置中，Build Phase选项的“Link Binary With Libraries”里加入目标framework。\n"),e("img",{attrs:{src:s(403),alt:"framework-use"}}),t._v("\n在项目配置中，General选项下添加我们的framework并嵌入\n"),e("img",{attrs:{src:s(404),alt:"framework-use 2"}})]),t._v(" "),e("h3",{attrs:{id:"新建sketch-framework"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#新建sketch-framework"}},[t._v("#")]),t._v(" 新建sketch framework")]),t._v(" "),e("p",[t._v("使用sketch官方提供的插件管理器——"),e("a",{attrs:{href:"https://github.com/skpm/skpm",target:"_blank",rel:"noopener noreferrer"}},[t._v("skpm"),e("OutboundLink")],1),t._v("可以创建sketch插件。"),e("br"),t._v("\n环境要求：")]),t._v(" "),e("ul",[e("li",[t._v("osx command line tool")]),t._v(" "),e("li",[t._v("Node > V6.x\n安装：")])]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" -g skpm\n")])])]),e("p",[t._v("创建sketch插件：")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v("skpm create plugin-name\n")])])]),e("p",[t._v("新创建的插件源码文件结构如下：\n"),e("img",{attrs:{src:s(405),alt:"sketch plugin source"}}),e("br"),t._v("\nmanifest.json为整个插件的声明文件，内容如下：\n"),e("img",{attrs:{src:s(406),alt:"sketch plugin source"}})]),t._v(" "),e("p",[t._v("commands代表插件可触发的命令，每个command的script即是这个命令触发时运行的代码入口文件。menu是新建的插件在sketch菜单栏中相关配置。"),e("a",{attrs:{href:"https://developer.sketch.com/plugins/create-a-plugin",target:"_blank",rel:"noopener noreferrer"}},[t._v("sketch开发文档"),e("OutboundLink")],1),t._v("介绍了demo插件的文件结构和说明，本文不再详细介绍。"),e("br"),t._v("\n插件安装完毕后，插件会自动build一次，打开sketch即可运行新建的demo插件。下图中插件名“my-plugin”对应manifest中的menu.title，“my-command”对应manifest的command name：\n"),e("img",{attrs:{src:s(407),alt:"demo plugin"}}),e("br"),t._v("\n后续我们会推出在CocoaJS中引入framework开发插件的进阶教程。")]),t._v(" "),e("h2",{attrs:{id:"oc语法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#oc语法"}},[t._v("#")]),t._v(" OC语法")]),t._v(" "),e("h3",{attrs:{id:"使用foudation框架内的数据类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用foudation框架内的数据类型"}},[t._v("#")]),t._v(" 使用Foudation框架内的数据类型")]),t._v(" "),e("p",[t._v("OC可以使用C语言自带的数据类型，并且在C的基础上通过框架（如Foudation）进行了拓展。通过“#import <Foudation/Foudation.h>”语句可以导入OC的基本功能层中定义的常用数据类型（如NSNumber、NSString等），\n这些类型的根对象类是（NSObject），数据类型名都以NS开头。Foudation工具包来源于NextSTEP，NS前缀名出自这里。我们日常使用OC开发Sketch插件时，主要使用这些NSObject。")]),t._v(" "),e("h3",{attrs:{id:"布尔类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#布尔类型"}},[t._v("#")]),t._v(" 布尔类型")]),t._v(" "),e("p",[t._v("C语言的布尔类型bool具有true、false两个值，OC也提供了相似的布尔类型BOOL，具有YES和NO两个值。这两种类型可以在同一程序中共存，Cocoa代码主要使用BOOL。\nBOOL本质上是8位有符号字符，通过#define命令定义YES是1，NO是0。如果把大于1字节的值传给BOOL变量，而该值低位字节恰好为0，则该BOOL值为NO。而对于bool类型，非0即为true。")]),t._v(" "),e("h3",{attrs:{id:"oc类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#oc类"}},[t._v("#")]),t._v(" OC类")]),t._v(" "),e("h4",{attrs:{id:"声明和使用一个自定义类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#声明和使用一个自定义类"}},[t._v("#")]),t._v(" 声明和使用一个自定义类")]),t._v(" "),e("p",[t._v("@interface关键字可以声明类的类型信息：")]),t._v(" "),e("div",{staticClass:"language-objectivec extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objectivec"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@interface")]),t._v(" Person NSObject\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    NSString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" getName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("div",{staticClass:"language-objectivec extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objectivec"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@implementation")]),t._v(" Person NSObject\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" getName "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("上面代码第一行代表新类Person继承（用:表示）自NSObject，第三行代表Person类有一个name实例变量。第五行代表Person类有一个示例方法getame。\n@implementtation部分代表Person类的实现部分，这里直接在getName方法中返回了实例变量name。"),e("br"),t._v("\n类的方法声明中，以-开头，代表的是实例方法，以+开头代表的是静态方法。\n如果需要使用一个新的Person对象，首先需要执行对象的分配（alloc）和初始化（init），alloc用于分配新的内存空间，init用于调用对象的初始化方法：")]),t._v(" "),e("div",{staticClass:"language-objectivec extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objectivec"}},[e("code",[t._v("Person "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("person "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Person alloc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" init"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("也可以使用其他自定义的初始化方法初始化对象，比如：")]),t._v(" "),e("div",{staticClass:"language-objectivec extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objectivec"}},[e("code",[t._v("NSNumber "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("n "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NSNumber alloc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" initWithDouble"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("也可以通过new关键字等价完成alloc和init操作（new 默认调用init方法）：")]),t._v(" "),e("div",{staticClass:"language-objectivec extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objectivec"}},[e("code",[t._v("Person "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("person "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Person new"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h4",{attrs:{id:"方法调用和中缀符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法调用和中缀符"}},[t._v("#")]),t._v(" 方法调用和中缀符")]),t._v(" "),e("p",[t._v("中括号代表调用函数或方法，链式的方法调用可以通过嵌套中括号实现。冒号后可传递参数。OC使用中缀符的语法技术，方法的名称和参数是连载一起的：")]),t._v(" "),e("div",{staticClass:"language-objectivec extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objectivec"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NSColor colorWithRed"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" green"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" blue"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" alpha"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("相比于常见的方法调用方式，这种方式的可读性更强一些，参数代表的意义变成了函数名的一部分。")]),t._v(" "),e("h4",{attrs:{id:"存取方法和属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#存取方法和属性"}},[t._v("#")]),t._v(" 存取方法和属性")]),t._v(" "),e("p",[t._v("OC也可以定义存取（accessor）。Cocoa的惯例是：setter方法是在属性的前面加set前缀命名，getter方法直接以返回的属性名称来命名。为Person类增加存取函数：")]),t._v(" "),e("div",{staticClass:"language-objectivec extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objectivec"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@interface")]),t._v(" Person NSObject\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    NSString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" setName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" newName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("div",{staticClass:"language-objectivec extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objectivec"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@implementation")]),t._v(" Person NSObject\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    NSString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此时我们使用了self，作用与未使用一样，只是为了消除歧义。")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" name "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" setName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("oc提供了@property简化代码：")]),t._v(" "),e("div",{staticClass:"language-objectivec extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objectivec"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@interface")]),t._v(" Person NSObject\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@property")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("assign"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" NSString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("div",{staticClass:"language-objectivec extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objectivec"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@implementation")]),t._v(" Person NSObject\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@synthesize")]),t._v(" name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("@synthesize是编译器的功能，编译器遇到该指令，会自动添加实现存取函数的预编译代码。同时原来方括号内的实例变量的声明已可有可无。"),e("br"),t._v("\n属性类型前的括号代表属性指示符，用于告知编译器属性的一些特性。常用的属性指示符：")]),t._v(" "),e("ul",[e("li",[t._v("assign。该指示符号对属性只是简单的赋值，不更改引用计数")]),t._v(" "),e("li",[t._v("atomic、nonatomic：指定setter和getter是否是原子操作，即是否线程安全。")]),t._v(" "),e("li",[t._v("copy：如果使用copy指示符，当调用setter方法对成员变量赋值时，会将被赋值的对象复制的一个副本，再将该副本给成员变量。")]),t._v(" "),e("li",[t._v("readonly、readwrite：readonly指示系统只合成getter方法，不合成setter方法；readwrite是默认值，指示系统需要合成setter方法和getter方法。")]),t._v(" "),e("li",[t._v("retain：当把某个对象赋值给该属性时，该属性原来所引用的对象的引用计数减1，被赋值对象的引用计数加1。在未启用ARC机制的的情况下，retain可以保证一个对象的引用计数大于1时，该对象不会被回收。启用ARC后基本用Strong代替retain")]),t._v(" "),e("li",[t._v("strong、weak：strong指示符该属性对被赋值对象持有强引用，而weak指示符指定该属性对被赋值对象持有弱引用。ARC（自动引用计数）不会为弱引用增加计数，引用对象被回收时，弱引用会被自动置为nil。")])]),t._v(" "),e("h3",{attrs:{id:"内存管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内存管理"}},[t._v("#")]),t._v(" 内存管理")]),t._v(" "),e("p",[t._v("上面有关属性支持符的描述，已经涉及了编程语言都需要关注的问题——内存管理。Cocoa使用引用计数技术来计算对象生命周期是否结束，当某段代码需要访问内存中某个对象时，对该对象的保留计数器加1，结束访问时对该对象的保留计数器减1。\nCocoa提供了一些内存管理的机制，下面一一介绍")]),t._v(" "),e("h4",{attrs:{id:"mrc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mrc"}},[t._v("#")]),t._v(" MRC")]),t._v(" "),e("p",[t._v("Cocoa中，使用alloc、new、copy消息创建对象时，对象的保留计数器值为1，通过retain、release、dealloc、retainCount消息可以操作保留计数器的值：")]),t._v(" "),e("ul",[e("li",[t._v("retain。增加对象的保留计数器的值。")]),t._v(" "),e("li",[t._v("release。减少对象的保留计数器的值。")]),t._v(" "),e("li",[t._v("retainCont。获取当前对象的保留计数器的值。")]),t._v(" "),e("li",[t._v("dealloc。当一个对象因为保留计数器归0要被销毁时，OC会自动向该对象发送一条dealloc消息，该指令不要直接调用，可以重写并释放自己的资源\n以下代码可以测试这几个指令的效果：")])]),t._v(" "),e("div",{staticClass:"language-objectivec extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objectivec"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@interface")]),t._v(" MRC"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" NSObject\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@implementation")]),t._v(" MRC\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" init "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v(" init"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"init：%lu"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" retainCount"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" dealloc "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"dealloc called"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v(" dealloc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("argv"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    MRC m "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MRC new"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"%d"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("m retainCount"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("m retain"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// count 2")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"%d"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("m retainCount"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("m release"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// count 1")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"%d"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("m retainCount"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("m release"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// count 0, dealloc")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),e("p",[t._v("对于MRC模式下，Cocoa有一些内存管理约定：")]),t._v(" "),e("ul",[e("li",[t._v("使用new、alloc、copy创建对象，对象保留计数器为1.不再使用时应该对其发送release或autorelease消息。")]),t._v(" "),e("li",[t._v("其他方法创建，如果是临时对象（并没有对该对象保留），则不需要管，如果保留了对象，则需要在dealloc中释放。")]),t._v(" "),e("li",[t._v("如果保留了某个对象，就需要释放或自动释放。需要保持retain的次数=release的次数。")])]),t._v(" "),e("h4",{attrs:{id:"autorelease-pool"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#autorelease-pool"}},[t._v("#")]),t._v(" autorelease pool")]),t._v(" "),e("p",[t._v("在MRC中，需要手动管理对象所有权的管理和释放，实际开发使用的时候会非常麻烦。《Objective-C基础教程》9.1.3有如下demo：")]),t._v(" "),e("div",{staticClass:"language-objectivec extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objectivec"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" setEngine"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Engine "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" e"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    engine "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("e retain"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// engine1的引用计数变化")]),t._v("\nEngine "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("engine1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Engine new"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("car setEngine"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" engine1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("engine1 release"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n")])])]),e("p",[t._v("上述代码在主程序释放了engine1的时候，car并没有释放对engine1的引用，此时engine1发生内存泄露。赋值时需要先释放对旧对象的引用，书中提供了修复方式：")]),t._v(" "),e("div",{staticClass:"language-objectivec extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objectivec"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" setEngine"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Engine "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" e"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("e retain"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("engine release"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    engine "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("Cocoa提供了自动释放池(autorelease pool)来方便开发者在MRC模式下进行内存管理，其会在销毁时对自动释放池内的对象调用release消息。\nrelease是对当前对象的引用计数进行减1的操作，如果对象引用计算为0，则会释放对象的内存空间。\nNSObject类提供了一个autorelase实例方法，MRC模式下可手动调用该方法，将其放入自动释放池中。iOS开发中不建议使用autorelease\n通过以下两种方式可以创建自动释放池：")]),t._v(" "),e("ul",[e("li",[t._v("@autoreleasepool关键字")]),t._v(" "),e("li",[t._v("NSAutoreleasePool对象")])]),t._v(" "),e("h4",{attrs:{id:"arc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#arc"}},[t._v("#")]),t._v(" ARC")]),t._v(" "),e("p",[t._v("ARC是编译器的一种特性，不是内存管理机制。他会在编译的时候，在代码中合适的位置插入retain和release。而不再需要手动retain、release、autorelease。\nARC使用strong替代retain，引入了weak弱引用。可以在Build Setting中搜gar，设置启用ARC：\n"),e("img",{attrs:{src:s(408),alt:"arc-only"}}),e("br"),t._v("\nARC只对可保留的对象指针（ROPs）有效，ROPs主要有以下三种：")]),t._v(" "),e("ol",[e("li",[t._v("代码块指针")]),t._v(" "),e("li",[t._v("OC对象指针")]),t._v(" "),e("li",[t._v("通过__attribute__((NSObject))类型定义的指针")])]),t._v(" "),e("p",[t._v("如CFStringRef不支持ARC，但是可以同时使用ARC和MRC。设置方法是，Build Phase中的Compile Sources中选择要使用ARC的.m文件，双击Compiler Flags选项，输入要设置的模式：")]),t._v(" "),e("ul",[e("li",[t._v("ARC状态下使用MRC的文件使用-fno-objc-arc")]),t._v(" "),e("li",[t._v("MRC状态下使用ARC的文件使用-fobjc-arc\n"),e("img",{attrs:{src:s(409),alt:"arc"}}),t._v("\n使用ARC时需要注意两个规则：")]),t._v(" "),e("li",[t._v("属性名不能以new开头")]),t._v(" "),e("li",[t._v("属性不能只有一个readonly而没有管理特性，因为默认的特性是assign，而ARC要求声明属性的所有权")])]),t._v(" "),e("h2",{attrs:{id:"相关资料"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#相关资料"}},[t._v("#")]),t._v(" 相关资料")]),t._v(" "),e("ol",[e("li",[e("a",{attrs:{href:"https://macdev.io/ebook/start.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("xcode 界面使用介绍"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/skpm/skpm",target:"_blank",rel:"noopener noreferrer"}},[t._v("skpm"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://developer.sketch.com/plugins/cocoascript",target:"_blank",rel:"noopener noreferrer"}},[t._v("CocoaScript"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://developer.sketch.com/reference/api/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Sketch API Reference"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://book.douban.com/subject/3864073/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Objective-C基础教程"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://book.douban.com/subject/30815894/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Cocoa学习手册"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=n.exports}}]);